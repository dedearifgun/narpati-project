ALUR PEMBUATAN WEBSITE IDIOMS
=====================================

Berdasarkan analisis website The Idioms (https://www.theidioms.com/), berikut adalah step-by-step alur pembuatan website idioms yang mirip dengan struktur OJT-Narpati.

=====================================
1. PERSIAPAN PROYEK
=====================================

Buat folder: idiom-website
‚îú‚îÄ‚îÄ backend/
‚îú‚îÄ‚îÄ frontend/
‚îî‚îÄ‚îÄ README.md

=====================================
2. BACKEND SETUP (Node.js + Express)
=====================================

cd backend
npm init -y
npm install express mongoose cors dotenv morgan
npm install -D nodemon

File yang dibutuhkan:
- server.js - Main server file
- package.json - Dependencies
- .env - Environment variables
- src/ folder structure

=====================================
3. DATABASE SETUP (MongoDB)
=====================================

Database: idiom-database
Collections:
‚îú‚îÄ‚îÄ idioms
‚îú‚îÄ‚îÄ categories  
‚îú‚îÄ‚îÄ users
‚îú‚îÄ‚îÄ quiz_questions
‚îî‚îÄ‚îÄ user_progress

=====================================
4. BACKEND STRUCTURE
=====================================

backend/
‚îú‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ .env
‚îî‚îÄ‚îÄ src/
    ‚îú‚îÄ‚îÄ models/
    ‚îÇ   ‚îú‚îÄ‚îÄ idiomModel.js
    ‚îÇ   ‚îú‚îÄ‚îÄ categoryModel.js
    ‚îÇ   ‚îú‚îÄ‚îÄ userModel.js
    ‚îÇ   ‚îî‚îÄ‚îÄ quizModel.js
    ‚îú‚îÄ‚îÄ controllers/
    ‚îÇ   ‚îú‚îÄ‚îÄ idiomController.js
    ‚îÇ   ‚îú‚îÄ‚îÄ categoryController.js
    ‚îÇ   ‚îú‚îÄ‚îÄ userController.js
    ‚îÇ   ‚îî‚îÄ‚îÄ quizController.js
    ‚îú‚îÄ‚îÄ routes/
    ‚îÇ   ‚îú‚îÄ‚îÄ idiomRoutes.js
    ‚îÇ   ‚îú‚îÄ‚îÄ categoryRoutes.js
    ‚îÇ   ‚îú‚îÄ‚îÄ userRoutes.js
    ‚îÇ   ‚îî‚îÄ‚îÄ quizRoutes.js
    ‚îú‚îÄ‚îÄ middleware/
    ‚îÇ   ‚îú‚îÄ‚îÄ authMiddleware.js
    ‚îÇ   ‚îî‚îÄ‚îÄ validationMiddleware.js
    ‚îî‚îÄ‚îÄ utils/
        ‚îú‚îÄ‚îÄ seedData.js
        ‚îî‚îÄ‚îÄ helpers.js

=====================================
5. FRONTEND SETUP (React)
=====================================

cd frontend
npx create-react-app .
npm install axios react-router-dom
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material

=====================================
6. FRONTEND STRUCTURE
=====================================

frontend/
‚îú‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SearchBox.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IdiomCard.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CategoryCard.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ QuizCard.js
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HomePage.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IdiomDetailPage.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CategoryPage.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SearchPage.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QuizPage.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AboutPage.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ constants.js
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îî‚îÄ‚îÄ index.js

=====================================
7. DATABASE MODELS (Mongoose)
=====================================

Idiom Model:
```javascript
// src/models/idiomModel.js
const mongoose = require('mongoose');

const IdiomSchema = new mongoose.Schema({
  title: { type: String, required: true },
  meaning: { type: String, required: true },
  examples: [String],
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category' },
  difficulty: { type: String, enum: ['easy', 'medium', 'hard'] },
  popularity: { type: Number, default: 0 },
  tags: [String],
  origin: String,
  synonyms: [String],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
```

Category Model:
```javascript
// src/models/categoryModel.js
const CategorySchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: String,
  icon: String,
  color: String,
  idiomCount: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now }
});
```

User Model:
```javascript
// src/models/userModel.js
const UserSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  bookmarks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Idiom' }],
  quizScores: [{
    quizId: String,
    score: Number,
    completedAt: Date
  }],
  createdAt: { type: Date, default: Date.now }
});
```

Quiz Model:
```javascript
// src/models/quizModel.js
const QuizSchema = new mongoose.Schema({
  question: { type: String, required: true },
  options: [String],
  correctAnswer: { type: Number, required: true },
  explanation: String,
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category' },
  difficulty: { type: String, enum: ['easy', 'medium', 'hard'] },
  createdAt: { type: Date, default: Date.now }
});
```

=====================================
8. API ROUTES
=====================================

Idiom Routes:
```javascript
// src/routes/idiomRoutes.js
GET /api/idioms - Get all idioms
GET /api/idioms/:id - Get single idiom
GET /api/idioms/category/:categoryId - Get idioms by category
GET /api/idioms/search/:query - Search idioms
GET /api/idioms/popular - Get popular idioms
GET /api/idioms/random - Get random idiom
POST /api/idioms - Create new idiom (admin)
PUT /api/idioms/:id - Update idiom (admin)
DELETE /api/idioms/:id - Delete idiom (admin)
```

Category Routes:
```javascript
// src/routes/categoryRoutes.js
GET /api/categories - Get all categories
GET /api/categories/:id - Get single category
POST /api/categories - Create category (admin)
PUT /api/categories/:id - Update category (admin)
DELETE /api/categories/:id - Delete category (admin)
```

User Routes:
```javascript
// src/routes/userRoutes.js
POST /api/users/register - Register user
POST /api/users/login - Login user
GET /api/users/profile - Get user profile
PUT /api/users/profile - Update profile
POST /api/users/bookmark/:idiomId - Bookmark idiom
DELETE /api/users/bookmark/:idiomId - Remove bookmark
GET /api/users/bookmarks - Get user bookmarks
```

Quiz Routes:
```javascript
// src/routes/quizRoutes.js
GET /api/quiz/questions - Get quiz questions
GET /api/quiz/questions/:category - Get questions by category
POST /api/quiz/submit - Submit quiz answers
GET /api/quiz/leaderboard - Get leaderboard
```

=====================================
9. FRONTEND PAGES
=====================================

HomePage.js:
- Hero section dengan search box
- Top 10 idioms populer
- Categories grid
- Idiom of the day
- Statistics (total idioms, categories, dll)

IdiomDetailPage.js:
- Idiom title
- Meaning/arti
- Examples/contoh penggunaan
- Category badge
- Difficulty indicator
- Related idioms
- Bookmark button
- Share buttons

CategoryPage.js:
- Category info dan description
- Idioms list dalam kategori
- Filter by difficulty
- Pagination
- Sort options

SearchPage.js:
- Search results
- Filter options
- Sort by relevance/popularity/date
- No results message

QuizPage.js:
- Quiz questions
- Multiple choice options
- Progress bar
- Score display
- Results summary

AboutPage.js:
- About website
- How to use
- Contact information
- FAQ section

=====================================
10. COMPONENTS
=====================================

Header.js:
- Logo
- Navigation menu
- Search box
- User menu (login/profile)

Footer.js:
- Links
- Social media
- Copyright
- Contact info

SearchBox.js:
- Search input
- Auto-complete suggestions
- Search filters
- Recent searches

IdiomCard.js:
- Idiom title
- Short meaning preview
- Category badge
- Difficulty indicator
- Bookmark button

CategoryCard.js:
- Category name
- Description
- Icon
- Idiom count
- Color theme

QuizCard.js:
- Question
- Options
- Progress indicator
- Submit button

=====================================
11. API INTEGRATION
=====================================

api.js:
```javascript
// Axios configuration
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// API endpoints
export const idiomAPI = {
  getAll: () => axios.get(`${API_BASE_URL}/idioms`),
  getById: (id) => axios.get(`${API_BASE_URL}/idioms/${id}`),
  search: (query) => axios.get(`${API_BASE_URL}/idioms/search/${query}`),
  getByCategory: (categoryId) => axios.get(`${API_BASE_URL}/idioms/category/${categoryId}`),
  getPopular: () => axios.get(`${API_BASE_URL}/idioms/popular`),
  getRandom: () => axios.get(`${API_BASE_URL}/idioms/random`)
};

// Error handling
// Request/response interceptors
```

=====================================
12. STYLING & UI
=====================================

CSS Framework:
- Material-UI components untuk konsistensi
- Custom CSS untuk branding
- Responsive design untuk mobile
- Dark/Light theme toggle
- Color scheme yang menarik

=====================================
13. FEATURES IMPLEMENTATION
=====================================

Search Functionality:
- Text search dengan fuzzy matching
- Category filter
- Difficulty filter
- Sort options (alphabetical, popularity, date)
- Search suggestions

Quiz System:
- Multiple choice questions
- Score tracking
- Progress saving
- Results display
- Leaderboard
- Different difficulty levels

User Features:
- Registration/Login
- Bookmark system
- Progress tracking
- Profile management
- Quiz history

=====================================
14. DATA SEEDING
=====================================

seedData.js:
```javascript
// Sample idioms data
const sampleIdioms = [
  {
    title: "Break a leg",
    meaning: "Semoga berhasil",
    examples: [
      "Good luck with your presentation! Break a leg!",
      "Break a leg at your job interview tomorrow!"
    ],
    category: "body",
    difficulty: "easy",
    tags: ["success", "encouragement"],
    origin: "Theater tradition"
  },
  // ... more idioms
];

// Categories data
const sampleCategories = [
  {
    name: "Binatang",
    description: "Idiom yang menggunakan nama binatang",
    icon: "üêæ",
    color: "#4CAF50"
  },
  // ... more categories
];

// Quiz questions
const sampleQuestions = [
  {
    question: "What does 'Break a leg' mean?",
    options: ["Break your leg", "Good luck", "Be careful", "Run fast"],
    correctAnswer: 1,
    explanation: "Break a leg is used to wish someone good luck",
    category: "body",
    difficulty: "easy"
  },
  // ... more questions
];
```

=====================================
15. DEPLOYMENT
=====================================

Backend Deployment:
- Deploy ke Heroku/Railway/DigitalOcean
- MongoDB Atlas untuk database
- Environment variables setup
- Domain configuration

Frontend Deployment:
- Build production dengan npm run build
- Deploy ke Netlify/Vercel/GitHub Pages
- CDN setup untuk performa
- SSL certificate

=====================================
16. TESTING & OPTIMIZATION
=====================================

Testing:
- API testing dengan Postman/Thunder Client
- Frontend testing dengan React Testing Library
- User experience testing
- Cross-browser compatibility

Optimization:
- Image optimization (jika ada)
- Code splitting untuk performa
- Caching strategy
- SEO optimization
- Performance monitoring

=====================================
17. ADDITIONAL FEATURES
=====================================

Advanced Features:
- User authentication dengan JWT
- Bookmark system
- Progress tracking
- Social sharing
- Email notifications
- Mobile app (React Native)
- PWA (Progressive Web App)
- Offline support

=====================================
18. MAINTENANCE
=====================================

Ongoing Tasks:
- Content updates (tambah idiom baru)
- Bug fixes
- Performance monitoring
- User feedback collection
- Analytics tracking
- Security updates
- Database optimization

=====================================
19. SAMPLE CONTENT
=====================================

Top 10 Idiom Populer:
1. Break a leg - Semoga berhasil
2. Piece of cake - Sangat mudah
3. Raining cats and dogs - Hujan sangat deras
4. Once in a blue moon - Sangat jarang
5. Hit the nail on the head - Tepat sasaran
6. Cost an arm and a leg - Sangat mahal
7. Bite the bullet - Menerima kenyataan yang sulit
8. Spill the beans - Membocorkan rahasia
9. The ball is in your court - Giliranmu untuk bertindak
10. Don't count your chickens - Jangan terlalu yakin

Kategori Populer:
- Binatang: 150+ idiom
- Makanan: 120+ idiom  
- Warna: 80+ idiom
- Tubuh: 200+ idiom
- Alam: 100+ idiom
- Emosi: 90+ idiom

=====================================
20. KATA-KATA UNTUK APLIKASI
=====================================

Navigation Menu:
- Beranda / Home
- A-Z Index / Indeks A-Z
- Kategori / Topik
- Semua Idiom / All Idioms
- Quiz / Kuis
- Tentang / About
- Kontak / Contact

Halaman Utama:
- "Selamat Datang di [Nama Aplikasi]"
- "Temukan Ribuan Idiom Bahasa Indonesia"
- "Cari Idiom" (search placeholder)
- "Idiom Populer"
- "Idiom Hari Ini"
- "Mulai Belajar"
- "Jelajahi Kategori"

Detail Idiom:
- "Arti" / "Makna"
- "Contoh Penggunaan"
- "Sinonim"
- "Asal Usul"
- "Tingkat Kesulitan"
- "Kategori"
- "Bagikan"
- "Simpan"

Tingkat Kesulitan:
- Mudah (Easy)
- Sedang (Medium)
- Sulit (Hard)
- Pemula (Beginner)
- Menengah (Intermediate)
- Lanjutan (Advanced)

Quiz/Game:
- "Mulai Kuis"
- "Pilih Jawaban yang Benar"
- "Skor Anda"
- "Jawaban Benar"
- "Jawaban Salah"
- "Penjelasan"
- "Lanjutkan"
- "Ulangi"
- "Selesai"

=====================================
KESIMPULAN
=====================================

Alur ini mirip dengan OJT-Narpati:
1. Backend setup dengan Express + MongoDB
2. Model creation untuk data structure
3. API development untuk CRUD operations
4. Frontend setup dengan React
5. Component development untuk UI
6. Integration antara frontend dan backend
7. Testing dan deployment
8. Maintenance dan updates

Perbedaan utama adalah tidak ada file upload dan fokus pada content management daripada e-commerce functionality.

Website ini akan menjadi platform pembelajaran idiom yang komprehensif dengan fitur quiz, bookmark, dan sistem pencarian yang canggih.
